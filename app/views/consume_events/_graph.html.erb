
<% @graph ||= 0; @graph += 1 %>

<div id="graph_<%= @graph %>" class="graph"></div>
<h2><%= value %></h2>

<script>
(function() {
  // Set the dimensions of the canvas / graph
  var margin = { top: 0, right: 50, bottom: 100, left: 100 },
      width  = $("#graph_<%= @graph %>").width(),
      height = $("#graph_<%= @graph %>").height();

  // console.debug(width, height);

  // Time Parsing Format
  var parseTime = d3.time.format("%Y-%m-%dT%H:%M:%S.%LZ").parse;

  // Set the ranges
  var x = d3.time.scale().range([0, width]);
  var y = d3.scale.linear().range([height, 0]);

  // Define the axes
  var xAxis = d3.svg.axis().scale(x)
    .orient("bottom").ticks(5);
  var yAxis = d3.svg.axis().scale(y)
    .orient("left").ticks(5);

  // Define the line
  var valueline = d3.svg.line()
    // .x(function(d) { return x(parseTime(d.consumed_at)); }) // not sure if parseTime needed here...
    .x(function(d) { return x(d.consumed_at); }) // not sure if parseTime needed here...
    .y(function(d) { return y(d.<%= value %>); });

  // Adds the svg canvas
  var svg = d3.select("#graph_<%= @graph %>")
    .append("svg")
      .attr("width",  width  + margin.left + margin.right )
      .attr("height", height + margin.top  + margin.bottom)
    .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  d3.json("consume_events.json?date=<%= @date %>", function(error, data) {
    data.forEach(function(d) {
        d.consumed_at      = parseTime(d.consumed_at);
        d.<%= value %> = +d.<%= value %>;
    });

    // Scale the range of the data
    x.domain(d3.extent(data,  function(d) { return d.consumed_at;      }));
    y.domain([0, d3.max(data, function(d) { return d.<%= value %>; })]);

    // Add the valueline path.
    svg.append("path")
      .attr("class", "line")
      .attr("d", valueline(data));

    // Add the X Axis
    svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

    // Add the Y Axis
    svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);
  });

  var updateBeerData = function() {
    d3.json("consume_events.json?date=<%= @date %>", function(error, data) {
      data.forEach(function(d) {
        d.consumed_at      = parseTime(d.consumed_at);
        d.<%= value %> = +d.<%= value %>;
      });

      // Scale the range of the data
      x.domain(d3.extent(data,  function(d) { return d.consumed_at;      }));
      y.domain([0, d3.max(data, function(d) { return d.<%= value %>; })]);

      // Select the section we want to apply our changes to
      var svg = d3.select("#graph_<%= @graph %>").transition();

      // Make the changes
      svg.select(".line")   // change the line
        .duration(750)
        .attr("d", valueline(data));
      svg.select(".x.axis") // change the x axis
        .duration(750)
        .call(xAxis);
      svg.select(".y.axis") // change the y axis
        .duration(750)
        .call(yAxis);
    });
    setTimeout(updateBeerData, 1000);
  }; updateBeerData();
})();
</script>

