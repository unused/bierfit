#!/usr/bin/env python3

# access serial communication
import serial
# sent to our rest webservice
import requests
# got time?
import time

# for nasty number extraction from string
import re

# do access some cli params...
import sys
# ...and read them
import getopt

# logging ftw
import logging

# could be ACM1 as well, depends on which usb slot used...
DEFAULT_PORT      = 'COM3'
DEFAULT_BAUD      = 9600
DEFAULT_URL       = 'http://bierfit.herokuapp.com/consume_events.json'
DEFAULT_LOGFILE   = 'bierfit.log'
DEFAULT_LOG_LEVEL = logging.INFO

RESTART_DELAY = 15

class ConsumeEvent:

  def __init__(self, readline):
    self.readline = str(readline)
    logging.debug("received: " + self.readline)
    self.consume_data = re.findall(r'\d+', self.readline)

  def valid(self):
    print(len(self.consume_data))
    return len(self.consume_data) == 6

  def push(self, url=DEFAULT_URL):
    try:
      params  = {
        'consume_event[user]':                     self.consume_data[0],
        'consume_event[analog_reading]':           self.consume_data[1],
        'consume_event[voltage_reading_in_mv]':    self.consume_data[2],
        'consume_event[fsr_resistance_in_ohms]':   self.consume_data[3],
        'consume_event[conductance_in_micromhos]': self.consume_data[4],
        'consume_event[force_in_newtons]':         self.consume_data[5],
        'consume_event[consumed_at]':              int(time.time())
      }
      requests.post(url, params)
    except requests.exceptions.RequestException as e:
      logging.error("webservice cannot be reached")
      logging.debug(str(e.__class__) + ": " + str(e))
      logging.info("missing so much data: " + self.readline)

# run forever!!111!1 - http://i.imgur.com/q3l0n.png
def prost():
  try:
    ser = serial.Serial(DEFAULT_PORT, DEFAULT_BAUD)
    while True:
      event = ConsumeEvent(ser.readline())
      event.push() if event.valid() else logging.error("bad message received")
  except Exception as e:
    logging.error("steck ein des ding...")
    logging.debug(str(e.__class__) + ": " + str(e))
    time.sleep(1)
    logging.info("restarting...")
    time.sleep(RESTART_DELAY)
    prost()

def main():
  # TODO: ... allow some options...
  # logging.basicConfig(filename=DEFAULT_LOGFILE, level=DEFAULT_LOG_LEVEL)
  logging.basicConfig(filename=DEFAULT_LOGFILE, level=logging.DEBUG)
  print("fu")
  prost()

if __name__ == "__main__":
  main()

